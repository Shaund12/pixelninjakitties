Here‚Äôs a complete, self-contained `index.html` you can drop into any static-file host. It lets you:

1. **Connect MetaMask**
2. **Mint** (calls your contract‚Äôs `mint(to)` ‚Äì so make sure you‚Äôre using the owner account or have added a public mint function)
3. **Load a gallery** of all minted PokeMon NFTs by reading `totalSupply()` + `tokenByIndex()` + `tokenURI()`, fetching each metadata JSON, and showing its image + name + ID.

Just replace `0xYourContractAddress` with your deployed PokeMonNFT address.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>PokeMon NFT ‚Äì Mint & Gallery</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background: #f5f5f5;
      color: #333;
    }
    h1 {
      margin-bottom: 10px;
    }
    #controls button {
      margin-right: 10px;
      padding: 8px 16px;
      font-size: 1rem;
    }
    #status {
      margin-top: 10px;
      font-style: italic;
    }
    #gallery {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(150px,1fr));
      grid-gap: 20px;
      margin-top: 20px;
    }
    .card {
      background: white;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 10px;
      text-align: center;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .card img {
      max-width: 100%;
      height: auto;
      border-radius: 4px;
    }
    .card .info {
      margin-top: 8px;
    }
  </style>
</head>
<body>
  <h1>PokeMon NFT <small id="network"></small></h1>
  <div id="controls">
    <button id="connectBtn">Connect Wallet</button>
    <button id="mintBtn" disabled>Mint NFT</button>
    <button id="refreshBtn" disabled>Refresh Gallery</button>
  </div>
  <div id="status">üîç Not connected</div>
  <div id="gallery"></div>

  <!-- Ethers.js from CDN -->
  <script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js"
          type="application/javascript"></script>
  <script type="application/javascript">
    // ‚îÄ‚îÄ‚îÄ CONFIGURE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    const contractAddress = '0xYourContractAddress';
    const contractABI = [
      "function mint(address to)",
      "function totalSupply() view returns (uint256)",
      "function tokenByIndex(uint256 index) view returns (uint256)",
      "function tokenURI(uint256 tokenId) view returns (string)"
    ];
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    let provider, signer, contract, userAddress;
    const connectBtn    = document.getElementById('connectBtn');
    const mintBtn       = document.getElementById('mintBtn');
    const refreshBtn    = document.getElementById('refreshBtn');
    const statusDiv     = document.getElementById('status');
    const galleryDiv    = document.getElementById('gallery');
    const networkLabel  = document.getElementById('network');

    // Init ethers provider & display network
    async function init() {
      if (!window.ethereum) {
        statusDiv.innerText = '‚ö†Ô∏è MetaMask not detected';
        return;
      }
      provider = new ethers.providers.Web3Provider(window.ethereum);
      const { name } = await provider.getNetwork();
      networkLabel.innerText = name;
    }

    // Connect wallet & set up contract instance
    connectBtn.onclick = async () => {
      try {
        await provider.send('eth_requestAccounts', []);
        signer = provider.getSigner();
        userAddress = await signer.getAddress();
        statusDiv.innerText = 'üë§ Connected: ' + userAddress;
        contract = new ethers.Contract(contractAddress, contractABI, signer);
        mintBtn.disabled    = false;
        refreshBtn.disabled = false;
        await loadGallery();
      } catch (err) {
        statusDiv.innerText = '‚ùå Connection failed: ' + err.message;
      }
    };

    // Mint to connected address
    mintBtn.onclick = async () => {
      statusDiv.innerText = '‚è≥ Minting‚Ä¶';
      try {
        const tx = await contract.mint(userAddress);
        await tx.wait();
        statusDiv.innerText = '‚úÖ Minted ‚Äì tx ' + tx.hash;
        await loadGallery();
      } catch (err) {
        statusDiv.innerText = '‚ùå Mint failed: ' + err.message;
      }
    };

    // Refresh gallery
    refreshBtn.onclick = loadGallery;

    // Load & display all tokens
    async function loadGallery() {
      galleryDiv.innerHTML = '';
      statusDiv.innerText = '‚è≥ Loading gallery‚Ä¶';
      try {
        const total = await contract.totalSupply();
        const supply = total.toNumber();
        for (let i = 0; i < supply; i++) {
          const tokenId = (await contract.tokenByIndex(i)).toNumber();
          const uri     = await contract.tokenURI(tokenId);
          try {
            const res = await fetch(uri);
            const md  = await res.json();
            const img = md.image || md.image_url || '';
            const name = md.name || `#${tokenId}`;
            const card = document.createElement('div');
            card.className = 'card';
            card.innerHTML = `
              <img src="${img}" alt="${name}" />
              <div class="info">
                <strong>${name}</strong><br/>ID: ${tokenId}
              </div>
            `;
            galleryDiv.append(card);
          } catch (_) {
            console.warn('Couldn‚Äôt fetch metadata for', tokenId);
          }
        }
        statusDiv.innerText = `üñºÔ∏è Loaded ${supply} token${supply!==1?'s':''}`;
      } catch (err) {
        statusDiv.innerText = '‚ùå Gallery load failed: ' + err.message;
      }
    }

    window.addEventListener('load', init);
  </script>
</body>
</html>
```

---

**Usage Notes**

* **Replace** `0xYourContractAddress` with your PokeMonNFT deployment address.
* By default this calls the **owner-only** `mint(address)` function‚Äîmake sure you connect with the contract owner key.
* If you prefer **public minting**, add a `publicMint()` payable function in your contract and swap the JS call to `contract.publicMint({ value: ‚Ä¶ })`.
* Metadata URIs must support **CORS** so the gallery can fetch each token‚Äôs JSON.
* Drop this file on any static host (GitHub Pages, S3, Netlify, etc.) and you‚Äôre ready to go!
